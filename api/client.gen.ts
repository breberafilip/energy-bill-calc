/* tslint:disable */
// email-service v1.0.0 fa4600dfba302a5f8c43be7d70d4b0e1493bc800
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v1.0.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "fa4600dfba302a5f8c43be7d70d4b0e1493bc800"


//
// Types
//
export interface EmailService {
  sendEmail(args: SendEmailArgs, headers?: object): Promise<SendEmailReturn>
}

export interface SendEmailArgs {
  email: string
  name: string
  body: string
  price: number
  electricity: number
  gas: number
}

export interface SendEmailReturn {
  status: boolean  
}


  
//
// Client
//
export class EmailService implements EmailService {
  private hostname: string
  private fetch: Fetch
  private path = '/rpc/EmailService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  sendEmail = (args: SendEmailArgs, headers?: object): Promise<SendEmailReturn> => {
    return this.fetch(
      this.url('SendEmail'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
